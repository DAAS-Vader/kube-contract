name: DaaS-K3s Integration Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - agent_registration
          - stake_verification
          - walrus_deployment
          - nautilus_attestation
      environment:
        description: 'Test environment'
        required: false
        default: 'docker'
        type: choice
        options:
          - docker
          - kubernetes
          - hybrid

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # Pre-flight checks
  preflight:
    name: Pre-flight Checks
    runs-on: ubuntu-latest
    outputs:
      test_suite: ${{ steps.determine-tests.outputs.test_suite }}
      environment: ${{ steps.determine-env.outputs.environment }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine test suite
        id: determine-tests
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "test_suite=${{ github.event.inputs.test_suite }}" >> $GITHUB_OUTPUT
          else
            echo "test_suite=all" >> $GITHUB_OUTPUT
          fi

      - name: Determine environment
        id: determine-env
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          else
            echo "environment=docker" >> $GITHUB_OUTPUT
          fi

      - name: Check Docker Compose files
        run: |
          docker-compose -f testing/docker-compose.yml config --quiet

      - name: Validate test configuration
        run: |
          python -m py_compile testing/integration-tests/*.py
          python -m py_compile testing/integration-tests/utils/*.py

      - name: Check required secrets
        run: |
          # In a real environment, you'd check for actual secrets
          echo "Checking for required test secrets..."
          echo "✓ Test configuration valid"

  # Build and test components
  build-components:
    name: Build Test Components
    runs-on: ubuntu-latest
    needs: preflight
    strategy:
      matrix:
        component:
          - k3s-daas-agent
          - test-runner
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.component }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.component }}-

      - name: Build ${{ matrix.component }}
        run: |
          if [ "${{ matrix.component }}" = "k3s-daas-agent" ]; then
            docker buildx build \
              --file testing/Dockerfile.k3s-agent \
              --tag daas-k3s-agent:test \
              --cache-from type=local,src=/tmp/.buildx-cache \
              --cache-to type=local,dest=/tmp/.buildx-cache-new,mode=max \
              --load \
              k3s-daas/
          elif [ "${{ matrix.component }}" = "test-runner" ]; then
            docker buildx build \
              --file testing/Dockerfile.test-runner \
              --tag daas-test-runner:test \
              --cache-from type=local,src=/tmp/.buildx-cache \
              --cache-to type=local,dest=/tmp/.buildx-cache-new,mode=max \
              --load \
              testing/
          fi

      - name: Test image
        run: |
          if [ "${{ matrix.component }}" = "k3s-daas-agent" ]; then
            docker run --rm daas-k3s-agent:test --version
          elif [ "${{ matrix.component }}" = "test-runner" ]; then
            docker run --rm daas-test-runner:test python --version
          fi

      - name: Export image
        run: |
          docker save daas-${{ matrix.component }}:test | gzip > /tmp/${{ matrix.component }}.tar.gz

      - name: Upload image artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.component }}-image
          path: /tmp/${{ matrix.component }}.tar.gz
          retention-days: 1

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  # Agent Registration Tests
  test-agent-registration:
    name: Agent Registration Tests
    runs-on: ubuntu-latest
    needs: [preflight, build-components]
    if: contains(needs.preflight.outputs.test_suite, 'all') || contains(needs.preflight.outputs.test_suite, 'agent_registration')
    timeout-minutes: 30
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: /tmp/artifacts

      - name: Load Docker images
        run: |
          docker load < /tmp/artifacts/k3s-daas-agent-image/k3s-daas-agent.tar.gz
          docker load < /tmp/artifacts/test-runner-image/test-runner.tar.gz

      - name: Set up test environment
        run: |
          cd testing
          chmod +x scripts/setup-test-environment.sh
          ./scripts/setup-test-environment.sh

      - name: Start test infrastructure
        run: |
          cd testing
          docker-compose up -d sui-node walrus-simulator k3s-server

          # Wait for services to be ready
          timeout 300 bash -c 'until docker-compose exec -T sui-node curl -f http://localhost:9000/health; do sleep 5; done'
          timeout 300 bash -c 'until docker-compose exec -T k3s-server k3s kubectl get nodes; do sleep 5; done'

      - name: Run agent registration tests
        run: |
          cd testing
          docker-compose run --rm test-runner pytest tests/test_agent_registration.py -v --tb=short --junit-xml=/tmp/junit-agent-registration.xml

      - name: Collect logs
        if: always()
        run: |
          cd testing
          mkdir -p /tmp/logs
          docker-compose logs sui-node > /tmp/logs/sui-node.log
          docker-compose logs k3s-server > /tmp/logs/k3s-server.log
          docker-compose logs k3s-agent-daas > /tmp/logs/k3s-agent.log

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: agent-registration-results
          path: |
            /tmp/junit-agent-registration.xml
            /tmp/logs/

      - name: Cleanup
        if: always()
        run: |
          cd testing
          docker-compose down -v

  # Stake Verification Tests
  test-stake-verification:
    name: Stake Verification Tests
    runs-on: ubuntu-latest
    needs: [preflight, build-components]
    if: contains(needs.preflight.outputs.test_suite, 'all') || contains(needs.preflight.outputs.test_suite, 'stake_verification')
    timeout-minutes: 25
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: /tmp/artifacts

      - name: Load Docker images
        run: |
          docker load < /tmp/artifacts/k3s-daas-agent-image/k3s-daas-agent.tar.gz
          docker load < /tmp/artifacts/test-runner-image/test-runner.tar.gz

      - name: Start test infrastructure
        run: |
          cd testing
          docker-compose up -d sui-node

      - name: Run stake verification tests
        run: |
          cd testing
          docker-compose run --rm test-runner pytest tests/test_stake_verification.py -v --tb=short --junit-xml=/tmp/junit-stake-verification.xml

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: stake-verification-results
          path: /tmp/junit-stake-verification.xml

      - name: Cleanup
        if: always()
        run: |
          cd testing
          docker-compose down -v

  # Walrus Deployment Tests
  test-walrus-deployment:
    name: Walrus Deployment Tests
    runs-on: ubuntu-latest
    needs: [preflight, build-components]
    if: contains(needs.preflight.outputs.test_suite, 'all') || contains(needs.preflight.outputs.test_suite, 'walrus_deployment')
    timeout-minutes: 40
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: /tmp/artifacts

      - name: Load Docker images
        run: |
          docker load < /tmp/artifacts/k3s-daas-agent-image/k3s-daas-agent.tar.gz
          docker load < /tmp/artifacts/test-runner-image/test-runner.tar.gz

      - name: Start test infrastructure
        run: |
          cd testing
          docker-compose up -d sui-node walrus-simulator k3s-server

      - name: Run Walrus deployment tests
        run: |
          cd testing
          docker-compose run --rm test-runner pytest tests/test_walrus_deployment.py -v --tb=short --junit-xml=/tmp/junit-walrus-deployment.xml

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: walrus-deployment-results
          path: /tmp/junit-walrus-deployment.xml

      - name: Cleanup
        if: always()
        run: |
          cd testing
          docker-compose down -v

  # Nautilus Attestation Tests
  test-nautilus-attestation:
    name: Nautilus Attestation Tests
    runs-on: ubuntu-latest
    needs: [preflight, build-components]
    if: contains(needs.preflight.outputs.test_suite, 'all') || contains(needs.preflight.outputs.test_suite, 'nautilus_attestation')
    timeout-minutes: 35
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: /tmp/artifacts

      - name: Load Docker images
        run: |
          docker load < /tmp/artifacts/k3s-daas-agent-image/k3s-daas-agent.tar.gz
          docker load < /tmp/artifacts/test-runner-image/test-runner.tar.gz

      - name: Start test infrastructure
        run: |
          cd testing
          docker-compose up -d sui-node walrus-simulator k3s-server nautilus-attestation

      - name: Run Nautilus attestation tests
        run: |
          cd testing
          docker-compose run --rm test-runner pytest tests/test_nautilus_attestation.py -v --tb=short --junit-xml=/tmp/junit-nautilus-attestation.xml

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: nautilus-attestation-results
          path: /tmp/junit-nautilus-attestation.xml

      - name: Cleanup
        if: always()
        run: |
          cd testing
          docker-compose down -v

  # Integration Test Suite
  test-integration:
    name: Full Integration Tests
    runs-on: ubuntu-latest
    needs: [preflight, build-components]
    if: contains(needs.preflight.outputs.test_suite, 'all')
    timeout-minutes: 60
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: /tmp/artifacts

      - name: Load Docker images
        run: |
          docker load < /tmp/artifacts/k3s-daas-agent-image/k3s-daas-agent.tar.gz
          docker load < /tmp/artifacts/test-runner-image/test-runner.tar.gz

      - name: Set up complete test environment
        run: |
          cd testing
          ./scripts/setup-test-environment.sh

      - name: Start full infrastructure
        run: |
          cd testing
          docker-compose up -d

          # Wait for all services
          echo "Waiting for infrastructure to be ready..."
          timeout 600 bash -c 'until docker-compose exec -T sui-node curl -f http://localhost:9000/health; do sleep 10; done'
          timeout 600 bash -c 'until docker-compose exec -T walrus-simulator curl -f http://localhost:31415/v1/health; do sleep 10; done'
          timeout 600 bash -c 'until docker-compose exec -T k3s-server k3s kubectl get nodes; do sleep 10; done'
          timeout 600 bash -c 'until docker-compose exec -T nautilus-attestation curl -f http://localhost:8090/health; do sleep 10; done'

      - name: Run full test suite
        run: |
          cd testing
          docker-compose run --rm test-runner pytest tests/ -v --tb=short --junit-xml=/tmp/junit-integration.xml --maxfail=5

      - name: Generate test report
        if: always()
        run: |
          cd testing
          docker-compose run --rm test-runner pytest tests/ --html=/tmp/test-report.html --self-contained-html

      - name: Collect comprehensive logs
        if: always()
        run: |
          cd testing
          mkdir -p /tmp/logs
          docker-compose logs > /tmp/logs/docker-compose.log
          docker-compose logs sui-node > /tmp/logs/sui-node.log
          docker-compose logs walrus-simulator > /tmp/logs/walrus-simulator.log
          docker-compose logs k3s-server > /tmp/logs/k3s-server.log
          docker-compose logs k3s-agent-daas > /tmp/logs/k3s-agent-daas.log
          docker-compose logs nautilus-attestation > /tmp/logs/nautilus-attestation.log

      - name: Upload comprehensive results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-results
          path: |
            /tmp/junit-integration.xml
            /tmp/test-report.html
            /tmp/logs/

      - name: Cleanup
        if: always()
        run: |
          cd testing
          docker-compose down -v
          docker system prune -f

  # Performance Tests
  test-performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [preflight, build-components]
    if: github.event_name == 'schedule' || contains(needs.preflight.outputs.test_suite, 'all')
    timeout-minutes: 45
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: /tmp/artifacts

      - name: Load Docker images
        run: |
          docker load < /tmp/artifacts/k3s-daas-agent-image/k3s-daas-agent.tar.gz
          docker load < /tmp/artifacts/test-runner-image/test-runner.tar.gz

      - name: Start infrastructure
        run: |
          cd testing
          docker-compose up -d

      - name: Run performance tests
        run: |
          cd testing
          docker-compose run --rm test-runner pytest tests/ -v -m "performance" --tb=short --junit-xml=/tmp/junit-performance.xml

      - name: Upload performance results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: performance-test-results
          path: /tmp/junit-performance.xml

      - name: Cleanup
        if: always()
        run: |
          cd testing
          docker-compose down -v

  # Security Tests
  test-security:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: [preflight, build-components]
    if: github.event_name == 'schedule' || contains(needs.preflight.outputs.test_suite, 'all')
    timeout-minutes: 30
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run security scan on Docker images
        run: |
          # Install trivy
          sudo apt-get update
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: /tmp/artifacts

      - name: Load and scan images
        run: |
          docker load < /tmp/artifacts/k3s-daas-agent-image/k3s-daas-agent.tar.gz
          docker load < /tmp/artifacts/test-runner-image/test-runner.tar.gz

          trivy image --exit-code 0 --format json --output /tmp/trivy-k3s-agent.json daas-k3s-daas-agent:test
          trivy image --exit-code 0 --format json --output /tmp/trivy-test-runner.json daas-test-runner:test

      - name: Upload security scan results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: security-scan-results
          path: |
            /tmp/trivy-*.json

  # Test Results Summary
  test-summary:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [test-agent-registration, test-stake-verification, test-walrus-deployment, test-nautilus-attestation, test-integration]
    if: always()
    steps:
      - name: Download all test results
        uses: actions/download-artifact@v3
        with:
          path: /tmp/all-results

      - name: Generate summary
        run: |
          echo "# DaaS-K3s Test Results Summary" > /tmp/test-summary.md
          echo "" >> /tmp/test-summary.md
          echo "## Test Status" >> /tmp/test-summary.md

          if [ "${{ needs.test-agent-registration.result }}" = "success" ]; then
            echo "✅ Agent Registration Tests: PASSED" >> /tmp/test-summary.md
          else
            echo "❌ Agent Registration Tests: FAILED" >> /tmp/test-summary.md
          fi

          if [ "${{ needs.test-stake-verification.result }}" = "success" ]; then
            echo "✅ Stake Verification Tests: PASSED" >> /tmp/test-summary.md
          else
            echo "❌ Stake Verification Tests: FAILED" >> /tmp/test-summary.md
          fi

          if [ "${{ needs.test-walrus-deployment.result }}" = "success" ]; then
            echo "✅ Walrus Deployment Tests: PASSED" >> /tmp/test-summary.md
          else
            echo "❌ Walrus Deployment Tests: FAILED" >> /tmp/test-summary.md
          fi

          if [ "${{ needs.test-nautilus-attestation.result }}" = "success" ]; then
            echo "✅ Nautilus Attestation Tests: PASSED" >> /tmp/test-summary.md
          else
            echo "❌ Nautilus Attestation Tests: FAILED" >> /tmp/test-summary.md
          fi

          if [ "${{ needs.test-integration.result }}" = "success" ]; then
            echo "✅ Integration Tests: PASSED" >> /tmp/test-summary.md
          else
            echo "❌ Integration Tests: FAILED" >> /tmp/test-summary.md
          fi

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('/tmp/test-summary.md', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

      - name: Upload summary
        uses: actions/upload-artifact@v3
        with:
          name: test-summary
          path: /tmp/test-summary.md

  # Cleanup
  cleanup:
    name: Cleanup Resources
    runs-on: ubuntu-latest
    needs: [test-summary]
    if: always()
    steps:
      - name: Clean up test artifacts
        run: |
          echo "Cleaning up test artifacts and temporary resources..."
          docker system prune -af --volumes || true

      - name: Report cleanup completion
        run: |
          echo "✅ Cleanup completed successfully"