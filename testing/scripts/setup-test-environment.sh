#!/bin/bash
# Setup script for DaaS testing environment

set -e

echo "ðŸš€ Setting up DaaS-K3s testing environment..."

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$(dirname "$SCRIPT_DIR")")"
WALLET_DIR="${PROJECT_ROOT}/testing/test-wallets"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Create test wallets directory
setup_test_wallets() {
    log_info "Setting up test wallets..."

    mkdir -p "$WALLET_DIR"

    # Generate test private key (deterministic for testing)
    echo "ed25519:0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef" > "$WALLET_DIR/worker.key"
    echo "ed25519:0xabcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890" > "$WALLET_DIR/seal-private.key"

    # Set proper permissions
    chmod 600 "$WALLET_DIR"/*.key

    log_success "Test wallets created"
}

# Generate Genesis blob for Sui
setup_sui_genesis() {
    log_info "Setting up Sui genesis configuration..."

    local sui_config_dir="${PROJECT_ROOT}/testing/configs/sui"
    mkdir -p "$sui_config_dir"

    # Create genesis configuration
    cat > "$sui_config_dir/genesis.yaml" << EOF
genesis_file_location: "$sui_config_dir/genesis.blob"
validator_info:
  - name: "validator-0"
    protocol_key: "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
    worker_key: "0xabcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890"
    account_key: "0x1111111111111111111111111111111111111111111111111111111111111111"
    network_key: "0x2222222222222222222222222222222222222222222222222222222222222222"
    stake: 20000000000000000
epoch_duration_ms: 86400000
objects:
  - coin:
      object_id: "0x0000000000000000000000000000000000000000000000000000000000000005"
      balance: 1000000000000000000
EOF

    # Create dummy genesis blob (would normally be generated by sui-genesis)
    echo "GENESIS_BLOB_PLACEHOLDER" > "$sui_config_dir/genesis.blob"

    log_success "Sui genesis configuration created"
}

# Setup K3s token file
setup_k3s_tokens() {
    log_info "Setting up K3s authentication tokens..."

    # Create SEAL token for DaaS authentication
    local seal_token="SEAL0x1234567890abcdef1234567890abcdef12345678::test-signature-$(date +%s)::test-challenge-$(date +%s)"
    echo "$seal_token" > "${PROJECT_ROOT}/testing/configs/k3s-agent/token"

    # Create traditional token for fallback
    echo "daas-test-token-12345" > "${PROJECT_ROOT}/testing/configs/k3s/server-token"

    log_success "K3s tokens configured"
}

# Setup monitoring configuration
setup_monitoring() {
    log_info "Setting up monitoring configuration..."

    local monitoring_dir="${PROJECT_ROOT}/testing/configs"

    # Prometheus configuration
    mkdir -p "$monitoring_dir/prometheus"
    cat > "$monitoring_dir/prometheus/prometheus.yml" << EOF
global:
  scrape_interval: 15s
  evaluation_interval: 15s

rule_files:
  - "daas_rules.yml"

scrape_configs:
  - job_name: 'k3s-server'
    static_configs:
      - targets: ['k3s-server:8001']

  - job_name: 'sui-node'
    static_configs:
      - targets: ['sui-node:9184']

  - job_name: 'walrus-simulator'
    static_configs:
      - targets: ['walrus-simulator:9091']

  - job_name: 'nautilus-attestation'
    static_configs:
      - targets: ['nautilus-attestation:8090']

alerting:
  alertmanagers:
    - static_configs:
        - targets: []
EOF

    # Grafana provisioning
    mkdir -p "$monitoring_dir/grafana/provisioning/dashboards"
    mkdir -p "$monitoring_dir/grafana/provisioning/datasources"

    cat > "$monitoring_dir/grafana/provisioning/datasources/prometheus.yml" << EOF
apiVersion: 1
datasources:
  - name: Prometheus
    type: prometheus
    access: proxy
    url: http://prometheus:9090
    isDefault: true
EOF

    log_success "Monitoring configuration created"
}

# Create test data
setup_test_data() {
    log_info "Setting up test data..."

    local test_data_dir="${PROJECT_ROOT}/testing/test-data"
    mkdir -p "$test_data_dir"

    # Sample deployment manifests
    cat > "$test_data_dir/test-deployment.yaml" << EOF
apiVersion: apps/v1
kind: Deployment
metadata:
  name: daas-test-app
  labels:
    app: daas-test
spec:
  replicas: 1
  selector:
    matchLabels:
      app: daas-test
  template:
    metadata:
      labels:
        app: daas-test
      annotations:
        daas.io/walrus-blob-id: "test-blob-123"
        daas.io/attestation-required: "true"
    spec:
      containers:
      - name: test-app
        image: nginx:alpine
        ports:
        - containerPort: 80
        env:
        - name: DAAS_ENABLED
          value: "true"
        resources:
          requests:
            memory: "64Mi"
            cpu: "100m"
          limits:
            memory: "128Mi"
            cpu: "200m"
EOF

    # Sample code for Walrus deployment
    cat > "$test_data_dir/sample-app.js" << EOF
// Sample application for DaaS testing
const express = require('express');
const app = express();
const port = 3000;

app.get('/health', (req, res) => {
    res.json({
        status: 'healthy',
        daas: process.env.DAAS_ENABLED || 'false',
        timestamp: new Date().toISOString()
    });
});

app.get('/', (req, res) => {
    res.json({
        message: 'DaaS Test Application',
        version: '1.0.0',
        node: process.env.HOSTNAME
    });
});

app.listen(port, () => {
    console.log('DaaS test app listening on port', port);
});
EOF

    log_success "Test data created"
}

# Validate environment
validate_environment() {
    log_info "Validating environment..."

    # Check required tools
    local required_tools=("docker" "docker-compose")
    for tool in "${required_tools[@]}"; do
        if ! command -v "$tool" &> /dev/null; then
            log_error "$tool is required but not installed"
            exit 1
        fi
    done

    # Check Docker daemon
    if ! docker info &> /dev/null; then
        log_error "Docker daemon is not running"
        exit 1
    fi

    log_success "Environment validation passed"
}

# Main setup function
main() {
    log_info "Starting DaaS-K3s testing environment setup"

    validate_environment
    setup_test_wallets
    setup_sui_genesis
    setup_k3s_tokens
    setup_monitoring
    setup_test_data

    log_success "DaaS-K3s testing environment setup complete!"

    echo ""
    log_info "Next steps:"
    echo "  1. cd ${PROJECT_ROOT}/testing"
    echo "  2. docker-compose up -d"
    echo "  3. docker-compose --profile testing run test-runner"
    echo ""
    log_info "To run specific tests:"
    echo "  docker-compose exec test-runner pytest tests/test_agent_registration.py -v"
    echo ""
    log_info "To view logs:"
    echo "  docker-compose logs -f k3s-agent-daas"
}

# Run main function
main "$@"