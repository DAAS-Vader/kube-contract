# K3s-DaaS Dockerfile for Demo Environment
FROM ubuntu:22.04

# Install dependencies
RUN apt-get update && apt-get install -y \
    curl \
    wget \
    jq \
    ca-certificates \
    iptables \
    systemd \
    systemd-sysv \
    dbus \
    && rm -rf /var/lib/apt/lists/*

# Install Go for building K3s-DaaS
RUN wget https://go.dev/dl/go1.21.0.linux-amd64.tar.gz && \
    tar -C /usr/local -xzf go1.21.0.linux-amd64.tar.gz && \
    rm go1.21.0.linux-amd64.tar.gz

ENV PATH="/usr/local/go/bin:$PATH"

# Create working directory
WORKDIR /app

# Copy K3s-DaaS source code
COPY . .

# Build K3s-DaaS
RUN go mod tidy && \
    make build && \
    cp dist/artifacts/k3s /usr/local/bin/k3s && \
    chmod +x /usr/local/bin/k3s

# Create DaaS configuration directory
RUN mkdir -p /etc/k3s-daas

# Create DaaS configuration file
RUN cat > /etc/k3s-daas/config.yaml << 'EOF'
daas:
  enabled: true
  nautilus:
    tee_endpoint: "http://nautilus-tee:8080"
    api_key: "demo-key-nautilus"
    enclave_path: "/app/enclave"
    performance_target: "50ms"
  sui:
    rpc_endpoint: "http://sui-blockchain:9000"
    private_key: "demo-private-key-hex"
    contract_package: "0xabcdef1234567890"
  walrus:
    api_endpoint: "http://walrus-storage:9002"
    publisher_url: "http://walrus-storage:9002"
    aggregator_url: "http://walrus-storage:9003"
  seal:
    min_stake: 1000000
    token_validity: "24h"
    blockchain_timeout: "10s"
EOF

# Create startup script
RUN cat > /usr/local/bin/k3s-daas-start.sh << 'EOF'
#!/bin/bash
set -e

# Wait for dependencies
echo "Waiting for Nautilus TEE..."
until curl -f http://nautilus-tee:8080/api/v1/health > /dev/null 2>&1; do
    echo "Nautilus TEE not ready, waiting..."
    sleep 5
done

echo "Waiting for Sui blockchain..."
until curl -f http://sui-blockchain:9000/health > /dev/null 2>&1; do
    echo "Sui blockchain not ready, waiting..."
    sleep 5
done

echo "Waiting for Walrus storage..."
until curl -f http://walrus-storage:9002/health > /dev/null 2>&1; do
    echo "Walrus storage not ready, waiting..."
    sleep 5
done

echo "All dependencies ready, starting K3s-DaaS..."

# Set up data directory
mkdir -p /var/lib/k3s-daas

# Start K3s with DaaS configuration
if [ "$K3S_MODE" = "server" ]; then
    echo "Starting K3s-DaaS server..."
    k3s server \
        --config /etc/k3s-daas/config.yaml \
        --data-dir /var/lib/k3s-daas \
        --disable-etcd \
        --write-kubeconfig-mode 644 \
        --node-name $(hostname) \
        --cluster-init \
        --bind-address 0.0.0.0 \
        --https-listen-port 6443 \
        --disable servicelb \
        --disable traefik \
        "$@"
elif [ "$K3S_MODE" = "agent" ]; then
    echo "Starting K3s-DaaS agent..."
    # Wait for server to be ready
    while ! curl -k https://k3s-daas-master:6443/livez > /dev/null 2>&1; do
        echo "Waiting for K3s server..."
        sleep 10
    done

    k3s agent \
        --config /etc/k3s-daas/config.yaml \
        --data-dir /var/lib/k3s-daas \
        --server https://k3s-daas-master:6443 \
        --node-name $(hostname) \
        --token "demo-token" \
        "$@"
else
    echo "Unknown K3S_MODE: $K3S_MODE"
    exit 1
fi
EOF

RUN chmod +x /usr/local/bin/k3s-daas-start.sh

# Create demo token for agent connection
RUN mkdir -p /var/lib/k3s-daas && \
    echo "demo-token" > /var/lib/k3s-daas/token

# Expose ports
EXPOSE 6443 10250

# Set entrypoint
ENTRYPOINT ["/usr/local/bin/k3s-daas-start.sh"]