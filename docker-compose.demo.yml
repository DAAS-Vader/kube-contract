version: '3.8'

services:
  # Nautilus TEE Simulator (for demo purposes)
  nautilus-tee:
    image: ubuntu:22.04
    container_name: k3s-daas-nautilus
    hostname: nautilus-tee
    environment:
      - NAUTILUS_TEE_MODE=simulation
      - NAUTILUS_API_KEY=demo-key-nautilus
      - NAUTILUS_ENCLAVE_PATH=/app/enclave
      - NAUTILUS_PERFORMANCE_TARGET=50ms
    ports:
      - "8080:8080"   # Nautilus TEE API
      - "8443:8443"   # Nautilus TEE Secure API
    volumes:
      - ./nautilus-data:/app/data
      - ./nautilus-config:/app/config
    command: |
      bash -c "
        apt-get update && apt-get install -y curl jq python3 python3-pip &&
        pip3 install flask requests &&
        python3 -c \"
import json
from flask import Flask, request, jsonify
import time
import random

app = Flask(__name__)

# Simulated TEE memory store
tee_store = {
    'apiserver-endpoints': {
        'endpoints': ['https://10.42.0.1:6443', 'https://10.42.0.2:6443'],
        'last_update': time.time()
    },
    'cluster-config': {
        'nodes': [],
        'stakers': {}
    }
}

@app.route('/api/v1/k8s/request', methods=['POST'])
def handle_k8s_request():
    data = request.json
    request_type = data.get('Type', '')

    if request_type == 'GET_API_ENDPOINTS':
        return jsonify({
            'Status': 'success',
            'Data': tee_store['apiserver-endpoints'],
            'ResponseTime': f'{random.randint(10, 45)}ms'
        })
    elif request_type == 'STORE_OBJECT':
        key = f\"{data.get('Namespace', 'default')}/{data.get('Name', 'unknown')}\"
        tee_store[key] = {
            'data': data.get('Data', {}),
            'timestamp': time.time()
        }
        return jsonify({
            'Status': 'success',
            'Message': f'Object stored in TEE memory: {key}',
            'ResponseTime': f'{random.randint(15, 40)}ms'
        })
    elif request_type == 'GET_OBJECT':
        key = f\"{data.get('Namespace', 'default')}/{data.get('Name', 'unknown')}\"
        if key in tee_store:
            return jsonify({
                'Status': 'success',
                'Data': tee_store[key],
                'ResponseTime': f'{random.randint(8, 35)}ms'
            })
        else:
            return jsonify({
                'Status': 'error',
                'Message': f'Object not found: {key}',
                'ResponseTime': f'{random.randint(20, 45)}ms'
            }), 404

    return jsonify({'Status': 'error', 'Message': 'Unknown request type'})

@app.route('/api/v1/health', methods=['GET'])
def health_check():
    return jsonify({
        'status': 'healthy',
        'tee_mode': 'simulation',
        'memory_usage': f'{random.randint(30, 60)}%',
        'response_time_avg': f'{random.randint(25, 45)}ms'
    })

@app.route('/api/v1/attestation', methods=['GET'])
def get_attestation():
    return jsonify({
        'status': 'valid',
        'quote': 'DEMO_TEE_QUOTE_' + str(int(time.time())),
        'pcr_values': ['demo_pcr0', 'demo_pcr1', 'demo_pcr2'],
        'measurement': 'demo_measurement_hash'
    })

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8080, debug=True)
\"
      "
    networks:
      - k3s-daas

  # Sui Blockchain Simulator
  sui-blockchain:
    image: ubuntu:22.04
    container_name: k3s-daas-sui
    hostname: sui-blockchain
    environment:
      - SUI_NETWORK=localnet
      - SUI_RPC_PORT=9000
    ports:
      - "9000:9000"   # Sui RPC
      - "9001:9001"   # Sui WebSocket
    volumes:
      - ./sui-data:/app/data
    command: |
      bash -c "
        apt-get update && apt-get install -y curl jq python3 python3-pip &&
        pip3 install flask requests &&
        python3 -c \"
import json
from flask import Flask, request, jsonify
import time
import random

app = Flask(__name__)

# Simulated blockchain state
blockchain_state = {
    'nodes': {
        'node-1': {
            'stake_amount': 1000,  # 테스트넷용 낮은 스테이킹 (1000 MIST)
            'status': 'active',
            'validator_addr': '0x1234567890abcdef',
            'last_update': time.time()
        }
    },
    'contracts': {
        'daas_registry': '0xabcdef1234567890',
        'staking': '0x9876543210fedcba'
    }
}

@app.route('/', methods=['POST'])
def sui_rpc():
    data = request.json
    method = data.get('method', '')

    if method == 'suix_queryObjects':
        # Simulate stake info query
        return jsonify({
            'jsonrpc': '2.0',
            'id': data.get('id', 1),
            'result': {
                'data': [{
                    'objectId': '0x123',
                    'version': '1',
                    'digest': 'demo_digest',
                    'type': 'StakeInfo',
                    'content': blockchain_state['nodes']['node-1']
                }]
            }
        })
    elif method == 'sui_executeTransactionBlock':
        # Simulate transaction execution
        return jsonify({
            'jsonrpc': '2.0',
            'id': data.get('id', 1),
            'result': {
                'digest': f'tx_demo_{int(time.time())}',
                'effects': {'status': 'success'},
                'events': [],
                'status': 'success'
            }
        })

    return jsonify({
        'jsonrpc': '2.0',
        'id': data.get('id', 1),
        'error': {'code': -32601, 'message': 'Method not found'}
    })

@app.route('/health', methods=['GET'])
def health():
    return jsonify({
        'status': 'healthy',
        'network': 'localnet',
        'nodes': len(blockchain_state['nodes'])
    })

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=9000, debug=True)
\"
      "
    networks:
      - k3s-daas

  # Walrus Storage Simulator
  walrus-storage:
    image: ubuntu:22.04
    container_name: k3s-daas-walrus
    hostname: walrus-storage
    environment:
      - WALRUS_PUBLISHER_URL=http://localhost:9002
      - WALRUS_AGGREGATOR_URL=http://localhost:9003
    ports:
      - "9002:9002"   # Publisher
      - "9003:9003"   # Aggregator
    volumes:
      - ./walrus-data:/app/storage
    command: |
      bash -c "
        apt-get update && apt-get install -y curl jq python3 python3-pip &&
        pip3 install flask requests &&
        mkdir -p /app/storage &&
        python3 -c \"
import json
import os
import hashlib
from flask import Flask, request, jsonify
import time

app = Flask(__name__)

STORAGE_DIR = '/app/storage'

@app.route('/v1/store', methods=['PUT'])
def store_blob():
    data = request.get_data()
    blob_id = hashlib.sha256(data).hexdigest()[:16]

    # Store blob to disk
    with open(f'{STORAGE_DIR}/{blob_id}', 'wb') as f:
        f.write(data)

    return jsonify({
        'newlyCreated': {
            'blobObject': {
                'id': blob_id,
                'storedEpoch': int(time.time()),
                'blobId': blob_id,
                'size': len(data),
                'erasureCodeType': 'RedStuff',
                'certifiedEpoch': int(time.time())
            }
        }
    })

@app.route('/v1/<blob_id>', methods=['GET'])
def get_blob(blob_id):
    try:
        with open(f'{STORAGE_DIR}/{blob_id}', 'rb') as f:
            data = f.read()
        return data
    except FileNotFoundError:
        return jsonify({'error': 'Blob not found'}), 404

@app.route('/health', methods=['GET'])
def health():
    return jsonify({
        'status': 'healthy',
        'storage_dir': STORAGE_DIR,
        'stored_blobs': len(os.listdir(STORAGE_DIR))
    })

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=9002, debug=True)
\"
      "
    networks:
      - k3s-daas

  # K3s DaaS Master Node
  k3s-daas-master:
    build:
      context: .
      dockerfile: Dockerfile.k3s-daas
    container_name: k3s-daas-master
    hostname: k3s-master
    privileged: true
    environment:
      - K3S_MODE=server
      - K3S_DAAS_ENABLED=true
      - K3S_DAAS_NAUTILUS_ENDPOINT=http://nautilus-tee:8080
      - K3S_DAAS_SUI_ENDPOINT=http://sui-blockchain:9000
      - K3S_DAAS_WALRUS_PUBLISHER=http://walrus-storage:9002
      - K3S_DAAS_WALRUS_AGGREGATOR=http://walrus-storage:9003
      - K3S_DATADIR=/var/lib/k3s-daas
      - DAAS_MIN_STAKE=100
      - DAAS_MIN_NODE_STAKE=1000
      - DAAS_MIN_USER_STAKE=100
      - DAAS_MIN_ADMIN_STAKE=10000
    ports:
      - "6443:6443"   # Kubernetes API
      - "10250:10250" # Kubelet
    volumes:
      - k3s-daas-data:/var/lib/k3s-daas
      - ./k3s-daas-config.yaml:/etc/k3s-daas/config.yaml
    depends_on:
      - nautilus-tee
      - sui-blockchain
      - walrus-storage
    command: |
      bash -c "
        export PATH=/usr/local/bin:\$PATH &&
        k3s server --disable-etcd --datastore-endpoint=nautilus://nautilus-tee:8080 \\
          --write-kubeconfig-mode=644 \\
          --node-name=k3s-daas-master \\
          --cluster-init
      "
    networks:
      - k3s-daas

  # K3s DaaS Worker Node (Staker Host)
  k3s-daas-worker:
    build:
      context: .
      dockerfile: Dockerfile.k3s-daas
    container_name: k3s-daas-worker
    hostname: k3s-worker
    privileged: true
    environment:
      - K3S_MODE=agent
      - K3S_DAAS_ENABLED=true
      - K3S_DAAS_SEAL_TOKEN=demo-seal-token-worker1
      - K3S_DAAS_NODE_ID=worker-node-1
      - K3S_DATADIR=/var/lib/k3s-daas
      - DAAS_MIN_NODE_STAKE=1000
    ports:
      - "10251:10250" # Kubelet
    volumes:
      - k3s-worker-data:/var/lib/k3s-daas
    depends_on:
      - k3s-daas-master
    command: |
      bash -c "
        sleep 30 &&
        export PATH=/usr/local/bin:\$PATH &&
        k3s agent --server https://k3s-daas-master:6443 \\
          --node-name=k3s-daas-worker \\
          --token=\$(cat /var/lib/k3s-daas/token 2>/dev/null || echo 'demo-token')
      "
    networks:
      - k3s-daas

  # Demo kubectl client
  kubectl-demo:
    image: bitnami/kubectl:latest
    container_name: k3s-daas-kubectl
    volumes:
      - ./demo-scripts:/scripts
      - k3s-daas-data:/k3s-data:ro
    working_dir: /scripts
    depends_on:
      - k3s-daas-master
    networks:
      - k3s-daas
    command: tail -f /dev/null

volumes:
  k3s-daas-data:
  k3s-worker-data:

networks:
  k3s-daas:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16